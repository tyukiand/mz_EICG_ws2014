./exercise_05/code/Flugzeug/Perspective.cpp:126:    glPushMatrix();
./exercise_05/code/Flugzeug/Perspective.cpp:127:    glTranslated(-5.0, 0.0, -5.0);
./exercise_05/code/Flugzeug/Perspective.cpp:128:    glScaled(10.0 / (sizeX - 1), 3.0, 10.0 / (sizeY - 1));
./exercise_05/code/Flugzeug/Perspective.cpp:129:    glLineWidth(1);
./exercise_05/code/Flugzeug/Perspective.cpp:133:    if (!wire) glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
./exercise_05/code/Flugzeug/Perspective.cpp:134:    else glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
./exercise_05/code/Flugzeug/Perspective.cpp:137:        glBegin(GL_TRIANGLE_STRIP);
./exercise_05/code/Flugzeug/Perspective.cpp:140:            glColor3dv(c.ptr());
./exercise_05/code/Flugzeug/Perspective.cpp:141:            glVertex3d(i, height_vector[i][j], j);
./exercise_05/code/Flugzeug/Perspective.cpp:142:            glColor3dv(c.ptr());
./exercise_05/code/Flugzeug/Perspective.cpp:143:            glVertex3d(i + 1, height_vector[i + 1][j], j);
./exercise_05/code/Flugzeug/Perspective.cpp:146:        glEnd();
./exercise_05/code/Flugzeug/Perspective.cpp:149:    glPopMatrix();
./exercise_05/code/Flugzeug/Perspective.cpp:159:    glViewport(0, 0, W, H);
./exercise_05/code/Flugzeug/Perspective.cpp:160:    glMatrixMode(GL_PROJECTION);
./exercise_05/code/Flugzeug/Perspective.cpp:161:    glLoadIdentity();
./exercise_05/code/Flugzeug/Perspective.cpp:165:        gluPerspective(180.0 * fov, ratio, 0.1, 10000.0);
./exercise_05/code/Flugzeug/Perspective.cpp:168:        gluPerspective(180.0 * fov, 1.0 / ratio, 0.1, 10000.0);
./exercise_05/code/Flugzeug/Perspective.cpp:171:    glMatrixMode(GL_MODELVIEW);
./exercise_05/code/Flugzeug/Perspective.cpp:180:    glClearColor(0.0, 0.0, 0.0, 0.0);
./exercise_05/code/Flugzeug/Perspective.cpp:198:    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
./exercise_05/code/Flugzeug/Perspective.cpp:203:    glEnable(GL_DEPTH_TEST);
./exercise_05/code/Flugzeug/Perspective.cpp:205:    glLoadIdentity();
./exercise_05/code/Flugzeug/Perspective.cpp:208:    glMatrixMode(GL_MODELVIEW);
./exercise_05/code/Flugzeug/Perspective.cpp:209:    glLoadIdentity();
./exercise_05/code/Flugzeug/Perspective.cpp:210:    glRotated(theta, 1.0, 0.0, 0.0);
./exercise_05/code/Flugzeug/Perspective.cpp:211:    glRotated(phi, 0.0, 1.0, 0.0);
./exercise_05/code/Flugzeug/Perspective.cpp:215:    glTranslated(0.0, 0.0, -3.0);
./exercise_05/code/Flugzeug/Perspective.cpp:222:    glTranslated(0.0, -1.0, 0.0);
./exercise_05/code/Flugzeug/Perspective.cpp:227:    glScaled(zoom, zoom, zoom);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:253:    glPushMatrix();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:254:    glTranslated(-landscapeSizeX / 2, -landscapeSizeY / 2, 0);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:255:    glScaled(
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:260:    glLineWidth(3);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:262:    if (!wire) glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:263:    else glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:268:        glBegin(GL_TRIANGLE_STRIP);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:276:            glColor3f(
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:281:            glVertex3d(i, j, height_vector[i][j]);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:282:            glColor3f(
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:287:            glVertex3d(i + 1, j, height_vector[i + 1][j]);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:290:        glEnd();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:293:    glPopMatrix();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:298:    glColor3f(buildingColor, buildingColor, buildingColor); \
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:299:  else glColor3f(townColor, townColor, townColor); \
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:300:  glVertex3dv(town_vertices[town_triangles[i]].ptr());
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:304:    glPushMatrix();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:306:    glColor3f(townColor, townColor, townColor);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:307:    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:308:    glBegin(GL_TRIANGLES);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:317:    glEnd();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:319:    glColor3f(0, 0, 0);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:320:    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:321:    glBegin(GL_TRIANGLES);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:324:        glVertex3dv(town_vertices[town_triangles[i + 0]].ptr());
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:325:        glVertex3dv(town_vertices[town_triangles[i + 1]].ptr());
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:326:        glVertex3dv(town_vertices[town_triangles[i + 2]].ptr());
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:329:    glEnd();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:331:    glPopMatrix();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:335:    glPushMatrix();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:337:    glEnable(GL_BLEND);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:338:    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:339:    glColor4f(0, 0.1, 0.6, 0.5);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:340:    glPolygonMode(GL_FRONT, GL_FILL);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:341:    glBegin(GL_TRIANGLES);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:342:    glVertex3d(landscapeSizeX / 2, landscapeSizeY / 2, seaLevel);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:343:    glVertex3d(-landscapeSizeX / 2, landscapeSizeY / 2, seaLevel);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:344:    glVertex3d(-landscapeSizeX / 2, -landscapeSizeY / 2, seaLevel);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:345:    glVertex3d(-landscapeSizeX / 2, -landscapeSizeY / 2, seaLevel);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:346:    glVertex3d(landscapeSizeX / 2, -landscapeSizeY / 2, seaLevel);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:347:    glVertex3d(landscapeSizeX / 2, landscapeSizeY / 2, seaLevel);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:348:    glEnd();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:350:    glPopMatrix();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:359:    glViewport(0, 0, W, H);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:360:    glMatrixMode(GL_PROJECTION);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:361:    glLoadIdentity();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:365:        gluPerspective(180.0 * fov, ratio, 0.1, 10000.0);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:368:        gluPerspective(180.0 * fov, 1.0 / ratio, 0.1, 10000.0);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:371:    glMatrixMode(GL_MODELVIEW);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:379:    glClearColor(0.0, 0.0, 0.0, 0.0);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:394:    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:399:    glEnable(GL_DEPTH_TEST);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:401:    glLoadIdentity();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:403:    glMatrixMode(GL_MODELVIEW);
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:404:    glLoadIdentity();
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:409:        gluLookAt(
./exercise_05/code/FlightSimulator/FlightSimulator.cpp:421:        gluLookAt(
./exercise_05/code/FlightSimulator/Jet.cpp:30:    glPushMatrix();
./exercise_05/code/FlightSimulator/Jet.cpp:39:    glMultMatrixd(R.ptr());
./exercise_05/code/FlightSimulator/Jet.cpp:41:    glColor3dv(color.ptr());
./exercise_05/code/FlightSimulator/Jet.cpp:49:        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
./exercise_05/code/FlightSimulator/Jet.cpp:50:        glBegin(GL_POLYGON);
./exercise_05/code/FlightSimulator/Jet.cpp:51:    } else glBegin(GL_LINE_LOOP);
./exercise_05/code/FlightSimulator/Jet.cpp:54:        glVertex3d(points_[i].x(), points_[i].y(), points_[i].z());
./exercise_05/code/FlightSimulator/Jet.cpp:56:    glEnd();
./exercise_05/code/FlightSimulator/Jet.cpp:58:    glColor3f(0.5, 0.5, 0.4);
./exercise_05/code/FlightSimulator/Jet.cpp:59:    glBegin(GL_LINES);
./exercise_05/code/FlightSimulator/Jet.cpp:63:    glVertex3d(propellerPositionX, c * r, s * r);
./exercise_05/code/FlightSimulator/Jet.cpp:64:    glVertex3d(propellerPositionX, - c * r, -s * r);
./exercise_05/code/FlightSimulator/Jet.cpp:65:    glEnd();
./exercise_05/code/FlightSimulator/Jet.cpp:67:    glPopMatrix();
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:6:    glGenBuffers(1,&id);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:86:    glBindBuffer(GL_ARRAY_BUFFER,id);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:87:    glBufferData(GL_ARRAY_BUFFER,vertexWithNormal.size()*sizeof(QVector3D),vertexWithNormal.data(),GL_STATIC_DRAW);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:219:    glGenBuffers(1,&id);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:226:    glBindBuffer(GL_ARRAY_BUFFER,id);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:227:    glBufferData(GL_ARRAY_BUFFER,vertexWithNormal.size()*sizeof(QVector3D),vertexWithNormal.data(),GL_STATIC_DRAW);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:268:    glGenBuffers(1,&id);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:270:    glBindBuffer(GL_ARRAY_BUFFER,id);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:271:    glBufferData(GL_ARRAY_BUFFER,vertexWithNormal.size()*sizeof(QVector3D),vertexWithNormal.data(),GL_STATIC_DRAW);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:305:    glBindBuffer(GL_ARRAY_BUFFER, vboSolidCylinderId);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:312:        glVertexAttribPointer(vertexLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), 0);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:315:        glVertexAttribPointer(normalLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), (const void*) sizeof(QVector3D));
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:316:    glDrawArrays(GL_TRIANGLES,0,vboSolidCylinderSize);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:323:    glBindBuffer(GL_ARRAY_BUFFER, vboSolidSphereId);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:330:        glVertexAttribPointer(vertexLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), 0);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:333:        glVertexAttribPointer(normalLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), (const void*) sizeof(QVector3D));
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:334:   glDrawArrays(GL_TRIANGLES,0,vboSolidSphereSize);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:345:    glBindBuffer(GL_ARRAY_BUFFER, vboSolidCubeId);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:349:    glVertexAttribPointer(vertexLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), 0);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:351:    glVertexAttribPointer(normalLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), (const void*) sizeof(QVector3D));
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:352:    glDrawArrays(GL_TRIANGLES,0,vboSolidCubeSize);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:359:    glGenBuffers(1,&vboTorusId);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:394:    glBindBuffer(GL_ARRAY_BUFFER,vboTorusId);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:395:    glBufferData(GL_ARRAY_BUFFER,vertexWithNormal.size()*sizeof(QVector3D),vertexWithNormal.data(),GL_STATIC_DRAW);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:404:    glBindBuffer(GL_ARRAY_BUFFER, vboTorusId);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:408:    glVertexAttribPointer(vertexLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), 0);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:411:    glVertexAttribPointer(normalLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), (const void*) sizeof(QVector3D));
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:413:    //        glUniform1i(texLocation, 1);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:414:    //        glActiveTexture(GL_TEXTURE1);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/drawing.cpp:416:    glDrawArrays(GL_QUADS,0,vboTorusSize);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:83:    glEnable(GL_DEPTH_TEST);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:84:    glEnable(GL_TEXTURE_2D);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:98:        glBindTexture(GL_TEXTURE_CUBE_MAP,i);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:99:        glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X,0,4,tex[i]->width(),tex[i]->height(),0);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:109:    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:132:    glUniform1i(texLocation, 1);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:133:    glActiveTexture(GL_TEXTURE1);
./exercise_12/code/Environment_Mapping/Environment_Mapping_Sphere/modernGL.cpp:145:    glViewport(0,0,width,height);
./exercise_10/code/exercise_1/Bezier.cpp:28:void glPrintErrors(const char* as_Function)
./exercise_10/code/exercise_1/Bezier.cpp:35:      lr_Error = glGetError();
./exercise_10/code/exercise_1/Bezier.cpp:119:    glEnable(GL_CULL_FACE);
./exercise_10/code/exercise_1/Bezier.cpp:120:    glFrontFace(GL_CCW);
./exercise_10/code/exercise_1/Bezier.cpp:121:    glCullFace(GL_BACK);
./exercise_10/code/exercise_1/Bezier.cpp:122:    glEnable(GL_DEPTH_TEST);
./exercise_10/code/exercise_1/Bezier.cpp:123:    glEnable(GL_NORMALIZE);
./exercise_10/code/exercise_1/Bezier.cpp:124:    glEnable(GL_COLOR_MATERIAL);
./exercise_10/code/exercise_1/Bezier.cpp:126:    glEnable(GL_BLEND);
./exercise_10/code/exercise_1/Bezier.cpp:127:    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_10/code/exercise_1/Bezier.cpp:140:    glMap1f(GL_MAP1_VERTEX_4, 0.0, 1.0, 4, l.size(), &tempoints[0][0]);
./exercise_10/code/exercise_1/Bezier.cpp:141:    glEnable(GL_MAP1_VERTEX_4);
./exercise_10/code/exercise_1/Bezier.cpp:143:    glBegin(GL_LINE_STRIP);
./exercise_10/code/exercise_1/Bezier.cpp:145:        glEvalCoord1f((GLfloat) i/(42.0*zoom));
./exercise_10/code/exercise_1/Bezier.cpp:146:    glEnd();
./exercise_10/code/exercise_1/Bezier.cpp:147:    glFlush();
./exercise_10/code/exercise_1/Bezier.cpp:148:    glDisable(GL_MAP1_VERTEX_4);
./exercise_10/code/exercise_1/Bezier.cpp:152:    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
./exercise_10/code/exercise_1/Bezier.cpp:156:    glTranslated(0.0,0.0,-3.0);
./exercise_10/code/exercise_1/Bezier.cpp:161:    glMultMatrixd(MT.ptr());
./exercise_10/code/exercise_1/Bezier.cpp:163:    glScaled(zoom,zoom,zoom);
./exercise_10/code/exercise_1/Bezier.cpp:164:    glTranslated(-center[0],-center[1],-center[2]);
./exercise_10/code/exercise_1/Bezier.cpp:166:    glClear(GL_COLOR_BUFFER_BIT);
./exercise_10/code/exercise_1/Bezier.cpp:168:    gl_proj4d(control_points);
./exercise_10/code/exercise_1/Bezier.cpp:175:                glVertex3dv(control_points[i].ptr());
./exercise_10/code/exercise_1/Bezier.cpp:178:    glColor3d (0,1,1);
./exercise_10/code/exercise_1/Bezier.cpp:179:    gl_proj4d(control_points);
./exercise_10/code/exercise_1/Bezier.cpp:189:        gluPerspective(45,ratio,1.0,10000.0);
./exercise_10/code/exercise_1/Bezier.cpp:193:        gluPerspective(45,ratio,1.0,10000.0);
./exercise_10/code/exercise_1/Bezier.cpp:202:    glGetIntegerv(GL_VIEWPORT,viewport);
./exercise_10/code/exercise_1/Bezier.cpp:204:    glGetDoublev(GL_PROJECTION_MATRIX,P);
./exercise_10/code/exercise_1/Bezier.cpp:205:    glGetDoublev(GL_MODELVIEW_MATRIX,M);
./exercise_10/code/exercise_1/Bezier.cpp:206:    gluUnProject(x,viewport[3]-1-y,z,M,P,viewport,&v[0],&v[1],&v[2]);
./exercise_10/code/Bezier/Bezier.cpp:28:void glPrintErrors(const char* as_Function)
./exercise_10/code/Bezier/Bezier.cpp:35:      lr_Error = glGetError();
./exercise_10/code/Bezier/Bezier.cpp:125:    glEnable(GL_CULL_FACE);
./exercise_10/code/Bezier/Bezier.cpp:126:    glFrontFace(GL_CCW);
./exercise_10/code/Bezier/Bezier.cpp:127:    glCullFace(GL_BACK);
./exercise_10/code/Bezier/Bezier.cpp:128:    glEnable(GL_DEPTH_TEST);
./exercise_10/code/Bezier/Bezier.cpp:129:    glEnable(GL_NORMALIZE);
./exercise_10/code/Bezier/Bezier.cpp:130:    glEnable(GL_COLOR_MATERIAL);
./exercise_10/code/Bezier/Bezier.cpp:132:    glEnable(GL_BLEND);
./exercise_10/code/Bezier/Bezier.cpp:133:    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_10/code/Bezier/Bezier.cpp:146:    glEnable(GL_MAP1_VERTEX_3);
./exercise_10/code/Bezier/Bezier.cpp:147:    glMap1f(GL_MAP1_VERTEX_3, 0.0, 1.0, 3, l.size(), &tempoints[0][0]);
./exercise_10/code/Bezier/Bezier.cpp:149:    glBegin(GL_LINE_STRIP);
./exercise_10/code/Bezier/Bezier.cpp:151:        glEvalCoord1f((GLfloat) i/(42.0*zoom));
./exercise_10/code/Bezier/Bezier.cpp:152:    glEnd();
./exercise_10/code/Bezier/Bezier.cpp:153:    glFlush();
./exercise_10/code/Bezier/Bezier.cpp:154:    glDisable(GL_MAP1_VERTEX_3);
./exercise_10/code/Bezier/Bezier.cpp:169:    glEnable(GL_MAP1_VERTEX_4);
./exercise_10/code/Bezier/Bezier.cpp:170:    glMap1f(GL_MAP1_VERTEX_4, 0.0, 1.0, 4, l.size(), &tempoints[0][0]);
./exercise_10/code/Bezier/Bezier.cpp:172:    glBegin(GL_LINE_STRIP);
./exercise_10/code/Bezier/Bezier.cpp:174:        glEvalCoord1f((GLfloat) i/(42.0*zoom));
./exercise_10/code/Bezier/Bezier.cpp:175:    glEnd();
./exercise_10/code/Bezier/Bezier.cpp:176:    glFlush();
./exercise_10/code/Bezier/Bezier.cpp:177:    glDisable(GL_MAP1_VERTEX_4);
./exercise_10/code/Bezier/Bezier.cpp:181:    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
./exercise_10/code/Bezier/Bezier.cpp:185:    glTranslated(0.0,0.0,-3.0);
./exercise_10/code/Bezier/Bezier.cpp:190:    glMultMatrixd(MT.ptr());
./exercise_10/code/Bezier/Bezier.cpp:192:    glScaled(zoom,zoom,zoom);
./exercise_10/code/Bezier/Bezier.cpp:193:    glTranslated(-center[0],-center[1],-center[2]);
./exercise_10/code/Bezier/Bezier.cpp:195:    glClear(GL_COLOR_BUFFER_BIT);
./exercise_10/code/Bezier/Bezier.cpp:197:    glColor3d (0.25,0.5,0.25);
./exercise_10/code/Bezier/Bezier.cpp:201:                glVertex3dv(control_points[i].ptr());
./exercise_10/code/Bezier/Bezier.cpp:204:    glColor3d (0.25,0.25,0.25);
./exercise_10/code/Bezier/Bezier.cpp:205:    glBegin(GL_LINE_STRIP);
./exercise_10/code/Bezier/Bezier.cpp:212:        glVertex3d(x,y,1);
./exercise_10/code/Bezier/Bezier.cpp:216:    glEnd();
./exercise_10/code/Bezier/Bezier.cpp:218:    glLineWidth(0.5);
./exercise_10/code/Bezier/Bezier.cpp:219:    glColor3d (0.,0.,0.);
./exercise_10/code/Bezier/Bezier.cpp:221:        glBegin(GL_LINE_STRIP);
./exercise_10/code/Bezier/Bezier.cpp:222:        glVertex3dv(control_points[i].ptr());
./exercise_10/code/Bezier/Bezier.cpp:223:        glVertex3d(0,0,0);
./exercise_10/code/Bezier/Bezier.cpp:224:        glEnd();
./exercise_10/code/Bezier/Bezier.cpp:230:    glColor3d (0,1,1);
./exercise_10/code/Bezier/Bezier.cpp:231:    gl_bezier3d(control_points);
./exercise_10/code/Bezier/Bezier.cpp:233:    glColor3d (0,1,1);
./exercise_10/code/Bezier/Bezier.cpp:234:    gl_proj4d(proj_points);
./exercise_10/code/Bezier/Bezier.cpp:237:    glColor3d (1,0,0);
./exercise_10/code/Bezier/Bezier.cpp:238:    glPointSize (5.0);
./exercise_10/code/Bezier/Bezier.cpp:239:    glBegin(GL_POINTS);
./exercise_10/code/Bezier/Bezier.cpp:242:            glVertex3dv(control_points[i].ptr());
./exercise_10/code/Bezier/Bezier.cpp:243:    glEnd();
./exercise_10/code/Bezier/Bezier.cpp:246:        glColor3d (1,0.5,0.5);
./exercise_10/code/Bezier/Bezier.cpp:247:        glPointSize (7.0);
./exercise_10/code/Bezier/Bezier.cpp:248:        glBegin(GL_POINTS);
./exercise_10/code/Bezier/Bezier.cpp:249:        glVertex3dv(control_points[select_point].ptr());
./exercise_10/code/Bezier/Bezier.cpp:250:        glEnd();
./exercise_10/code/Bezier/Bezier.cpp:254:    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
./exercise_10/code/Bezier/Bezier.cpp:255:    glBegin(GL_QUADS);
./exercise_10/code/Bezier/Bezier.cpp:257:    glColor4f(105/255.0,105/255.0,105/255.0,0.95);
./exercise_10/code/Bezier/Bezier.cpp:259:    glVertex3d( 1, 1,1);
./exercise_10/code/Bezier/Bezier.cpp:260:    glVertex3d(-1, 1,1);
./exercise_10/code/Bezier/Bezier.cpp:261:    glVertex3d(-1,-1,1);
./exercise_10/code/Bezier/Bezier.cpp:262:    glVertex3d( 1,-1,1);
./exercise_10/code/Bezier/Bezier.cpp:264:    glVertex3d( 1, 1,1);
./exercise_10/code/Bezier/Bezier.cpp:265:    glVertex3d( 1,-1,1);
./exercise_10/code/Bezier/Bezier.cpp:266:    glVertex3d(-1,-1,1);
./exercise_10/code/Bezier/Bezier.cpp:267:    glVertex3d(-1, 1,1);
./exercise_10/code/Bezier/Bezier.cpp:269:    glEnd();
./exercise_10/code/Bezier/Bezier.cpp:271:    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
./exercise_10/code/Bezier/Bezier.cpp:272:    glBegin(GL_QUADS);
./exercise_10/code/Bezier/Bezier.cpp:274:    glColor4f(0,0,0,1);
./exercise_10/code/Bezier/Bezier.cpp:276:    glVertex3d( 1, 1,0);
./exercise_10/code/Bezier/Bezier.cpp:277:    glVertex3d(-1, 1,0);
./exercise_10/code/Bezier/Bezier.cpp:278:    glVertex3d(-1,-1,0);
./exercise_10/code/Bezier/Bezier.cpp:279:    glVertex3d( 1,-1,0);
./exercise_10/code/Bezier/Bezier.cpp:281:    glVertex3d( 1, 1,0);
./exercise_10/code/Bezier/Bezier.cpp:282:    glVertex3d( 1,-1,0);
./exercise_10/code/Bezier/Bezier.cpp:283:    glVertex3d(-1,-1,0);
./exercise_10/code/Bezier/Bezier.cpp:284:    glVertex3d(-1, 1,0);
./exercise_10/code/Bezier/Bezier.cpp:286:    glEnd();
./exercise_10/code/Bezier/Bezier.cpp:296:        gluPerspective(45,ratio,1.0,10000.0);
./exercise_10/code/Bezier/Bezier.cpp:300:        gluPerspective(45,ratio,1.0,10000.0);
./exercise_10/code/Bezier/Bezier.cpp:309:    glGetIntegerv(GL_VIEWPORT,viewport);
./exercise_10/code/Bezier/Bezier.cpp:311:    glGetDoublev(GL_PROJECTION_MATRIX,P);
./exercise_10/code/Bezier/Bezier.cpp:312:    glGetDoublev(GL_MODELVIEW_MATRIX,M);
./exercise_10/code/Bezier/Bezier.cpp:313:    gluUnProject(x,viewport[3]-1-y,z,M,P,viewport,&v[0],&v[1],&v[2]);
./exercise_10/code/Bezier/Bezier.cpp:388:    glGetIntegerv(GL_VIEWPORT,viewport);
./exercise_07/code/Trackball/Perspective.cpp:123:	// glEnable(GL_CULL_FACE);
./exercise_07/code/Trackball/Perspective.cpp:124:  glEnable(GL_BLEND);
./exercise_07/code/Trackball/Perspective.cpp:125:  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_07/code/Trackball/Perspective.cpp:138:  glLineWidth(2.0);
./exercise_07/code/Trackball/Perspective.cpp:141:    glBegin(GL_LINE_LOOP);
./exercise_07/code/Trackball/Perspective.cpp:143:      glVertex3dv(coord[ifs[i][j]].ptr());
./exercise_07/code/Trackball/Perspective.cpp:144:    glEnd();
./exercise_07/code/Trackball/Perspective.cpp:147:  // glPointSize(5.0);
./exercise_07/code/Trackball/Perspective.cpp:148:  // glBegin(GL_POINTS);
./exercise_07/code/Trackball/Perspective.cpp:150:  //   glVertex3dv(coord[i].ptr());
./exercise_07/code/Trackball/Perspective.cpp:151:  // glEnd();
./exercise_07/code/Trackball/Perspective.cpp:155:  glMatrixMode(GL_MODELVIEW);
./exercise_07/code/Trackball/Perspective.cpp:156:  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
./exercise_07/code/Trackball/Perspective.cpp:159:  glLoadIdentity();
./exercise_07/code/Trackball/Perspective.cpp:160:  glTranslated(0, 0, -3);
./exercise_07/code/Trackball/Perspective.cpp:161:  glMultMatrixd(currentRotationMatrix.transpose().ptr());
./exercise_07/code/Trackball/Perspective.cpp:162:  glScaled(zoom, zoom, zoom);
./exercise_07/code/Trackball/Perspective.cpp:163:  glTranslated(-center[0],-center[1],-center[2]);
./exercise_07/code/Trackball/Perspective.cpp:164:  glColor4f(0.0, 0.3, 0.6, 0.7);
./exercise_07/code/Trackball/Perspective.cpp:168:  glLoadIdentity();
./exercise_07/code/Trackball/Perspective.cpp:169:  glTranslated(0, 0, -3);
./exercise_07/code/Trackball/Perspective.cpp:170:  glScaled(zoom, zoom, zoom);
./exercise_07/code/Trackball/Perspective.cpp:171:  glTranslated(-center[0],-center[1],-center[2]);
./exercise_07/code/Trackball/Perspective.cpp:172:  glColor4f(0.2, 0.2, 0.2, 0.2);
./exercise_11/code/modernGL/modernGL.cpp:73:    glEnable(GL_DEPTH_TEST);
./exercise_11/code/modernGL/modernGL.cpp:83:    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
./exercise_11/code/modernGL/modernGL.cpp:116:    glViewport(0,0,width,height);
./exercise_11/code/modernGL/modernGL.cpp:327:    glGenBuffers(1,&id);
./exercise_11/code/modernGL/modernGL.cpp:334:    glBindBuffer(GL_ARRAY_BUFFER,id);
./exercise_11/code/modernGL/modernGL.cpp:335:    glBufferData(GL_ARRAY_BUFFER,vertexWithNormal.size()*sizeof(QVector3D),
./exercise_11/code/modernGL/modernGL.cpp:349:    glBindBuffer(GL_ARRAY_BUFFER, vboSolidSphereId);
./exercise_11/code/modernGL/modernGL.cpp:353:    glVertexAttribPointer(vertexLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), 0);
./exercise_11/code/modernGL/modernGL.cpp:357:    glVertexAttribPointer(normalLocation, 3, GL_FLOAT, GL_FALSE, 2*sizeof(QVector3D), (const void*) sizeof(QVector3D));
./exercise_11/code/modernGL/modernGL.cpp:359:    glDrawArrays(GL_TRIANGLES,0,vboSolidSphereSize);
./exercise_02/code/Lizard.cpp:147:	tobj = gluNewTess();
./exercise_02/code/Lizard.cpp:149:	gluTessCallback(tobj,(GLenum)GLU_TESS_BEGIN, (void(APIENTRY*)()) glBegin);
./exercise_02/code/Lizard.cpp:150:	gluTessCallback(tobj,(GLenum)GLU_TESS_VERTEX,(void(APIENTRY*)()) glVertex3dv);
./exercise_02/code/Lizard.cpp:151:	gluTessCallback(tobj,(GLenum)GLU_TESS_END,   (void(APIENTRY*)()) glEnd);
./exercise_02/code/Lizard.cpp:153:    gluTessCallback(tobj,(GLenum)GLU_TESS_BEGIN, (void(APIENTRY*)()) glBegin);
./exercise_02/code/Lizard.cpp:154:    gluTessCallback(tobj,(GLenum)GLU_TESS_VERTEX,(void(APIENTRY*)()) glVertex3dv);
./exercise_02/code/Lizard.cpp:155:    gluTessCallback(tobj,(GLenum)GLU_TESS_END,   (void(APIENTRY*)()) glEnd);
./exercise_02/code/Lizard.cpp:157:    gluTessCallback(tobj,(GLenum)GLU_TESS_BEGIN, (void(*)())glBegin);
./exercise_02/code/Lizard.cpp:158:    gluTessCallback(tobj,(GLenum)GLU_TESS_VERTEX,(void(*)())glVertex3dv);
./exercise_02/code/Lizard.cpp:159:    gluTessCallback(tobj,(GLenum)GLU_TESS_END,   (void(*)())glEnd);
./exercise_02/code/Lizard.cpp:202:	    glBegin(GL_POINTS);
./exercise_02/code/Lizard.cpp:209:                glVertex2d(px, py);
./exercise_02/code/Lizard.cpp:212:        glEnd();
./exercise_08/code/Lighthouse/Perspective.cpp:154:    glLightfv(GL_LIGHT0, GL_AMBIENT, lightamb);
./exercise_08/code/Lighthouse/Perspective.cpp:161:        glLightfv(GL_LIGHT0, GL_SPECULAR, lightColor);
./exercise_08/code/Lighthouse/Perspective.cpp:162:        glDisable(GL_LIGHT1);
./exercise_08/code/Lighthouse/Perspective.cpp:171:        glLightfv(GL_LIGHT0, GL_SPECULAR, lightColor);
./exercise_08/code/Lighthouse/Perspective.cpp:172:        glDisable(GL_LIGHT1);
./exercise_08/code/Lighthouse/Perspective.cpp:181:        glLightfv(GL_LIGHT0, GL_AMBIENT, lightColor);
./exercise_08/code/Lighthouse/Perspective.cpp:182:        glEnable(GL_LIGHT1);
./exercise_08/code/Lighthouse/Perspective.cpp:191:        glLightfv(GL_LIGHT0, GL_AMBIENT, lightColor);
./exercise_08/code/Lighthouse/Perspective.cpp:192:        glEnable(GL_LIGHT1);
./exercise_08/code/Lighthouse/Perspective.cpp:197:    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
./exercise_08/code/Lighthouse/Perspective.cpp:198:    glDisable (GL_LIGHTING);
./exercise_08/code/Lighthouse/Perspective.cpp:200:        glTranslated(p[0],p[1],p[2]);
./exercise_08/code/Lighthouse/Perspective.cpp:201:        glColor3d(sunColor.x(),sunColor.y(),sunColor.z());
./exercise_08/code/Lighthouse/Perspective.cpp:202:		GLUquadric * q = gluNewQuadric();
./exercise_08/code/Lighthouse/Perspective.cpp:204:        gluSphere (q,.2,20,20);
./exercise_08/code/Lighthouse/Perspective.cpp:207:    glEnable (GL_LIGHTING);
./exercise_08/code/Lighthouse/Perspective.cpp:218:    glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, light_dir);
./exercise_08/code/Lighthouse/Perspective.cpp:219:    glLightf( GL_LIGHT1, GL_SPOT_CUTOFF, 10.0);
./exercise_08/code/Lighthouse/Perspective.cpp:220:    glLightfv(GL_LIGHT1, GL_AMBIENT,  light1Eigens);
./exercise_08/code/Lighthouse/Perspective.cpp:221:    glLightf(GL_LIGHT1, GL_QUADRATIC_ATTENUATION, 10);//abschwaechung mit 1/entfernung^2
./exercise_08/code/Lighthouse/Perspective.cpp:222:    glLightfv(GL_LIGHT1, GL_POSITION, light_position);
./exercise_08/code/Lighthouse/Perspective.cpp:225:   glDisable (GL_LIGHTING);
./exercise_08/code/Lighthouse/Perspective.cpp:232:		myQuad = gluNewQuadric();
./exercise_08/code/Lighthouse/Perspective.cpp:238:        glPushMatrix();
./exercise_08/code/Lighthouse/Perspective.cpp:259:            gluCylinder( myQuad , 0.00 , 0.04 ,0.6/12, 10,10 );
./exercise_08/code/Lighthouse/Perspective.cpp:266:        glVertex3d( .1*d[0], .1*d[1], .1*d[2] );
./exercise_08/code/Lighthouse/Perspective.cpp:268:    glPopMatrix();
./exercise_08/code/Lighthouse/Perspective.cpp:269:    glEnable (GL_LIGHTING);
./exercise_08/code/Lighthouse/Perspective.cpp:303:		if (!wire) glPolygonMode (GL_FRONT_AND_BACK, GL_FILL);
./exercise_08/code/Lighthouse/Perspective.cpp:304:		else glPolygonMode (GL_FRONT_AND_BACK, GL_LINE);
./exercise_08/code/Lighthouse/Perspective.cpp:332:        glColor4d(wasser.x(),wasser.y(),wasser.z(),alpha);
./exercise_08/code/Lighthouse/Perspective.cpp:333:        glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_08/code/Lighthouse/Perspective.cpp:336:            glBegin(GL_TRIANGLE_STRIP);
./exercise_08/code/Lighthouse/Perspective.cpp:341:        glEnd();
./exercise_08/code/Lighthouse/Perspective.cpp:344:    glPopMatrix ();
./exercise_08/code/Lighthouse/Perspective.cpp:354:  glViewport(0, 0, W, H);
./exercise_08/code/Lighthouse/Perspective.cpp:355:  glMatrixMode(GL_PROJECTION);
./exercise_08/code/Lighthouse/Perspective.cpp:356:  glLoadIdentity();	
./exercise_08/code/Lighthouse/Perspective.cpp:361:    gluPerspective(180.0*fov,ratio,0.1,10000.0);
./exercise_08/code/Lighthouse/Perspective.cpp:366:    gluPerspective(180.0*fov,1.0/ratio,0.1,10000.0);
./exercise_08/code/Lighthouse/Perspective.cpp:368:  glMatrixMode(GL_MODELVIEW);
./exercise_08/code/Lighthouse/Perspective.cpp:431:  glEnable(GL_LIGHT0);
./exercise_08/code/Lighthouse/Perspective.cpp:432:  glEnable(GL_LIGHT1);
./exercise_08/code/Lighthouse/Perspective.cpp:433:  glEnable(GL_LIGHTING);
./exercise_08/code/Lighthouse/Perspective.cpp:434:  glEnable(GL_NORMALIZE);
./exercise_08/code/Lighthouse/Perspective.cpp:435:  glEnable(GL_COLOR_MATERIAL);
./exercise_08/code/Lighthouse/Perspective.cpp:437:  glEnable(GL_LINE_SMOOTH);
./exercise_08/code/Lighthouse/Perspective.cpp:438:  glEnable(GL_POLYGON_SMOOTH);
./exercise_08/code/Lighthouse/Perspective.cpp:441:  glClearColor(0.0,0.0,0.0,0.0);
./exercise_08/code/Lighthouse/Perspective.cpp:466:  glLoadIdentity();
./exercise_08/code/Lighthouse/Perspective.cpp:470:		/// Mit gluLookAt l"asst sich dem Flugzeug folgen
./exercise_08/code/Lighthouse/Perspective.cpp:488:				 glTranslated(0.0,0.0,-3.0);
./exercise_08/code/Lighthouse/Perspective.cpp:504:    if (!wire) glEnable(GL_LIGHTING);
./exercise_08/code/Lighthouse/Perspective.cpp:508://  glutSwapBuffers();
./exercise_08/code/Lighthouse/Perspective.cpp:530:	// rotate global view
./exercise_08/code/MyTorus/MyTorus.cpp:211:            glVertex3d(coordTorus[n][i].x(),coordTorus[n][i].y(),coordTorus[n][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:212:            glVertex3d(coordTorus[n_1][i].x(),coordTorus[n_1][i].y(),coordTorus[n_1][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:213:            glVertex3d(coordTorus[n_1][i_1].x(),coordTorus[n_1][i_1].y(),coordTorus[n_1][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:214:            glVertex3d(coordTorus[n][i_1].x(),coordTorus[n][i_1].y(),coordTorus[n][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:234:            glNormal3d(normal.x(),normal.y(),normal.z());
./exercise_08/code/MyTorus/MyTorus.cpp:236:            glVertex3d(coordTorus[n][i].x(),coordTorus[n][i].y(),coordTorus[n][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:237:            glVertex3d(coordTorus[n_1][i].x(),coordTorus[n_1][i].y(),coordTorus[n_1][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:238:            glVertex3d(coordTorus[n_1][i_1].x(),coordTorus[n_1][i_1].y(),coordTorus[n_1][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:239:            glVertex3d(coordTorus[n][i_1].x(),coordTorus[n][i_1].y(),coordTorus[n][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:262:            glNormal3d(normal1.x(),normal1.y(),normal1.z());
./exercise_08/code/MyTorus/MyTorus.cpp:263:            glVertex3d(coordTorus[n][i].x(),coordTorus[n][i].y(),coordTorus[n][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:265:            glNormal3d(normal2.x(),normal2.y(),normal2.z());
./exercise_08/code/MyTorus/MyTorus.cpp:266:            glVertex3d(coordTorus[n_1][i].x(),coordTorus[n_1][i].y(),coordTorus[n_1][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:268:            glNormal3d(normal3.x(),normal3.y(),normal3.z());
./exercise_08/code/MyTorus/MyTorus.cpp:269:            glVertex3d(coordTorus[n_1][i_1].x(),coordTorus[n_1][i_1].y(),coordTorus[n_1][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:271:            glNormal3d(normal4.x(),normal4.y(),normal4.z());
./exercise_08/code/MyTorus/MyTorus.cpp:272:            glVertex3d(coordTorus[n][i_1].x(),coordTorus[n][i_1].y(),coordTorus[n][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:293:            glNormal3d(normal1.x(),normal1.y(),normal1.z());
./exercise_08/code/MyTorus/MyTorus.cpp:294:            glVertex3d(coordTorus[n][i].x(),coordTorus[n][i].y(),coordTorus[n][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:296:            glNormal3d(normal2.x(),normal2.y(),normal2.z());
./exercise_08/code/MyTorus/MyTorus.cpp:297:            glVertex3d(coordTorus[n_1][i].x(),coordTorus[n_1][i].y(),coordTorus[n_1][i].z());
./exercise_08/code/MyTorus/MyTorus.cpp:299:            glNormal3d(normal3.x(),normal3.y(),normal3.z());
./exercise_08/code/MyTorus/MyTorus.cpp:300:            glVertex3d(coordTorus[n_1][i_1].x(),coordTorus[n_1][i_1].y(),coordTorus[n_1][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:302:            glNormal3d(normal4.x(),normal4.y(),normal4.z());
./exercise_08/code/MyTorus/MyTorus.cpp:303:            glVertex3d(coordTorus[n][i_1].x(),coordTorus[n][i_1].y(),coordTorus[n][i_1].z());
./exercise_08/code/MyTorus/MyTorus.cpp:342:    glMaterialfv(GL_FRONT_AND_BACK,GL_AMBIENT,ambient);
./exercise_08/code/MyTorus/MyTorus.cpp:343:    glMaterialfv(GL_FRONT_AND_BACK,GL_DIFFUSE, diffuse);
./exercise_08/code/MyTorus/MyTorus.cpp:344:    glMaterialfv(GL_FRONT_AND_BACK,GL_SPECULAR, spekular);
./exercise_08/code/MyTorus/MyTorus.cpp:345:    glMaterialfv(GL_FRONT_AND_BACK,GL_SHININESS, shine );
./exercise_08/code/MyTorus/MyTorus.cpp:352:        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
./exercise_08/code/MyTorus/MyTorus.cpp:354:        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
./exercise_08/code/MyTorus/MyTorus.cpp:356:            glShadeModel(GL_FLAT);
./exercise_08/code/MyTorus/MyTorus.cpp:358:            glShadeModel(GL_SMOOTH);
./exercise_08/code/MyTorus/MyTorus.cpp:360:    glBegin(GL_QUADS);
./exercise_08/code/MyTorus/MyTorus.cpp:362:    glColor3f(1,0,0);
./exercise_08/code/MyTorus/MyTorus.cpp:375:    glEnd();
./exercise_08/code/MyTorus/MyTorus.cpp:398:    glEnable(GL_NORMALIZE);
./exercise_08/code/MyTorus/MyTorus.cpp:399:    glDisable(GL_COLOR_MATERIAL);
./exercise_08/code/MyTorus/MyTorus.cpp:400:    glEnable(GL_BLEND);
./exercise_08/code/MyTorus/MyTorus.cpp:401:    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_08/code/MyTorus/MyTorus.cpp:412:        glEnable(GL_LIGHTING);
./exercise_08/code/MyTorus/MyTorus.cpp:415:        glDisable(GL_LIGHTING);
./exercise_08/code/MyTorus/MyTorus.cpp:418:    glRotated(beta,1.0,0.0,0.0);
./exercise_08/code/MyTorus/MyTorus.cpp:419:    glRotated(alpha,0.0,1.0,0.0);
./exercise_08/code/MyTorus/MyTorus.cpp:420:    glScaled(zoom,zoom,zoom);
./exercise_08/code/MyTorus/MyTorus.cpp:424:    glColor3f(1.0,.0,.0);
./exercise_08/code/MyTorus/MyTorus.cpp:427:    glEnable(GL_LIGHT0);
./exercise_08/code/MyTorus/MyTorus.cpp:429:    glLightfv(GL_LIGHT0,GL_POSITION,pos0);
./exercise_08/code/MyTorus/MyTorus.cpp:430:    glLineWidth(1.0);
./exercise_08/code/MyTorus/MyTorus.cpp:439:        glOrtho(-ratio,ratio,-1.0,1.0,-10.0,10.0);
./exercise_08/code/MyTorus/MyTorus.cpp:443:        glOrtho(-1.0,1.0,-ratio,ratio,-10.0,10.0);
./exercise_06/code/Trackball/Perspective.cpp:23:void glutWireCube( GLdouble dSize )
./exercise_06/code/Trackball/Perspective.cpp:29:#   define V(a,b,c) glVertex3d( a size, b size, c size );
./exercise_06/code/Trackball/Perspective.cpp:30:#   define N(a,b,c) glNormal3d( a, b, c );
./exercise_06/code/Trackball/Perspective.cpp:33:    glBegin( GL_LINE_LOOP ); N( 1.0, 0.0, 0.0); V(+,-,+); V(+,-,-); V(+,+,-); V(+,+,+); glEnd();
./exercise_06/code/Trackball/Perspective.cpp:34:    glBegin( GL_LINE_LOOP ); N( 0.0, 1.0, 0.0); V(+,+,+); V(+,+,-); V(-,+,-); V(-,+,+); glEnd();
./exercise_06/code/Trackball/Perspective.cpp:35:    glBegin( GL_LINE_LOOP ); N( 0.0, 0.0, 1.0); V(+,+,+); V(-,+,+); V(-,-,+); V(+,-,+); glEnd();
./exercise_06/code/Trackball/Perspective.cpp:36:    glBegin( GL_LINE_LOOP ); N(-1.0, 0.0, 0.0); V(-,-,+); V(-,+,+); V(-,+,-); V(-,-,-); glEnd();
./exercise_06/code/Trackball/Perspective.cpp:37:    glBegin( GL_LINE_LOOP ); N( 0.0,-1.0, 0.0); V(-,-,+); V(-,-,-); V(+,-,-); V(+,-,+); glEnd();
./exercise_06/code/Trackball/Perspective.cpp:38:    glBegin( GL_LINE_LOOP ); N( 0.0, 0.0,-1.0); V(-,-,-); V(-,+,-); V(+,+,-); V(+,-,-); glEnd();
./exercise_06/code/Trackball/Perspective.cpp:47:void glutSolidCube( GLdouble dSize )
./exercise_06/code/Trackball/Perspective.cpp:51:#   define V(a,b,c) glVertex3d( a size, b size, c size );
./exercise_06/code/Trackball/Perspective.cpp:52:#   define N(a,b,c) glNormal3d( a, b, c );
./exercise_06/code/Trackball/Perspective.cpp:55:    glBegin( GL_QUADS );
./exercise_06/code/Trackball/Perspective.cpp:62:    glEnd();
./exercise_06/code/Trackball/Perspective.cpp:140:    glLineWidth (3.0);
./exercise_06/code/Trackball/Perspective.cpp:141:    glColor3d (0,0,1);
./exercise_06/code/Trackball/Perspective.cpp:142:    glutWireCube (1.0);
./exercise_03/code/Demo04/Lizard.cpp:200:    tobj = gluNewTess();
./exercise_03/code/Demo04/Lizard.cpp:202:    gluTessCallback(tobj, (GLenum)GLU_TESS_BEGIN, (void(APIENTRY *)()) glBegin);
./exercise_03/code/Demo04/Lizard.cpp:203:    gluTessCallback(tobj, (GLenum)GLU_TESS_VERTEX, (void(APIENTRY *)()) glVertex3dv);
./exercise_03/code/Demo04/Lizard.cpp:204:    gluTessCallback(tobj, (GLenum)GLU_TESS_END, (void(APIENTRY *)()) glEnd);
./exercise_03/code/Demo04/Lizard.cpp:206:    gluTessCallback(tobj, (GLenum)GLU_TESS_BEGIN, (void( *)()) glBegin);
./exercise_03/code/Demo04/Lizard.cpp:207:    gluTessCallback(tobj, (GLenum)GLU_TESS_VERTEX, (void( *)()) glVertex3dv);
./exercise_03/code/Demo04/Lizard.cpp:208:    gluTessCallback(tobj, (GLenum)GLU_TESS_END, (void( *)()) glEnd);
./exercise_03/code/Demo04/Lizard.cpp:210:    gluTessProperty(tobj, GLU_TESS_BOUNDARY_ONLY, GL_FALSE);
./exercise_03/code/Demo04/Lizard.cpp:214:    glMatrixMode(GL_MODELVIEW);
./exercise_03/code/Demo04/Lizard.cpp:216:    glClear(GL_COLOR_BUFFER_BIT);
./exercise_03/code/Demo04/Lizard.cpp:221:        glLoadIdentity();
./exercise_03/code/Demo04/Lizard.cpp:222:        glScaled(zoom, zoom, 1.0);
./exercise_03/code/Demo04/Lizard.cpp:223:        glTranslated(-centerX, -centerY, 0.0);
./exercise_03/code/Demo04/Lizard.cpp:226:        glTranslated(trans[i][0], trans[i][1], 0);
./exercise_03/code/Demo04/Lizard.cpp:227:        glTranslated(center[i][0], center[i][1], 0);
./exercise_03/code/Demo04/Lizard.cpp:228:        glRotated(trans[i][2], 0, 0, 1);
./exercise_03/code/Demo04/Lizard.cpp:229:        glTranslated(-center[i][0], -center[i][1], 0);
./exercise_03/code/Demo04/Lizard.cpp:230:        glColor3f(0.0f, 1.0f, 0.0f);
./exercise_03/code/Demo04/Lizard.cpp:233:            glColor3f(1.0f, 0.0f, 0.0f);
./exercise_03/code/Demo04/Lizard.cpp:236:        gluTessBeginPolygon(tobj, NULL);
./exercise_03/code/Demo04/Lizard.cpp:237:        gluTessBeginContour(tobj);
./exercise_03/code/Demo04/Lizard.cpp:240:            gluTessVertex(tobj, &poly[i][3 * j], &poly[i][3 * j]);
./exercise_03/code/Demo04/Lizard.cpp:242:        gluTessEndContour(tobj);
./exercise_03/code/Demo04/Lizard.cpp:243:        gluTessEndPolygon(tobj);
./exercise_03/code/Demo04/Lizard.cpp:246:        glColor3f(0.0f, 0.0f, 0.0f);
./exercise_03/code/Demo04/Lizard.cpp:247:        glBegin(GL_LINE_STRIP);
./exercise_03/code/Demo04/Lizard.cpp:253:            glVertex2d(poly[i][3 * j + 0], poly[i][3 * j + 1]);
./exercise_03/code/Demo04/Lizard.cpp:258:            glVertex2d(poly[i][0], poly[i][1]);
./exercise_03/code/Demo04/Lizard.cpp:260:        glEnd();
./exercise_03/code/Demo04/Lizard.cpp:266:    glViewport(0, 0, width, height);
./exercise_03/code/Demo04/Lizard.cpp:267:    glMatrixMode(GL_PROJECTION);
./exercise_03/code/Demo04/Lizard.cpp:268:    glLoadIdentity();
./exercise_03/code/Demo04/Lizard.cpp:272:        gluOrtho2D(-ratio, ratio, -1.0, 1.0);
./exercise_03/code/Demo04/Lizard.cpp:275:        gluOrtho2D(-1.0, 1.0, -ratio, ratio);
./exercise_03/code/Demo04/Lizard.cpp:278:    glMatrixMode(GL_MODELVIEW);
./exercise_03/code/tangram/Tangram.cpp:162:    tobj = gluNewTess();
./exercise_03/code/tangram/Tangram.cpp:164:    gluTessCallback(tobj, (GLenum)GLU_TESS_BEGIN, (void (APIENTRY *)()) glBegin);
./exercise_03/code/tangram/Tangram.cpp:165:    gluTessCallback(tobj, (GLenum)GLU_TESS_VERTEX, (void (APIENTRY *)()) glVertex3dv);
./exercise_03/code/tangram/Tangram.cpp:166:    gluTessCallback(tobj, (GLenum)GLU_TESS_END, (void (APIENTRY *)()) glEnd);
./exercise_03/code/tangram/Tangram.cpp:168:    gluTessCallback(tobj, (GLenum)GLU_TESS_BEGIN, (void ( *)()) glBegin);
./exercise_03/code/tangram/Tangram.cpp:169:    gluTessCallback(tobj, (GLenum)GLU_TESS_VERTEX, (void ( *)()) glVertex3dv);
./exercise_03/code/tangram/Tangram.cpp:170:    gluTessCallback(tobj, (GLenum)GLU_TESS_END, (void ( *)()) glEnd);
./exercise_03/code/tangram/Tangram.cpp:172:    gluTessProperty(tobj, GLU_TESS_BOUNDARY_ONLY, GL_FALSE);
./exercise_03/code/tangram/Tangram.cpp:176:    glMatrixMode(GL_MODELVIEW);
./exercise_03/code/tangram/Tangram.cpp:177:    glClear(GL_COLOR_BUFFER_BIT);
./exercise_03/code/tangram/Tangram.cpp:178:    glEnable(GL_BLEND);
./exercise_03/code/tangram/Tangram.cpp:179:    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_03/code/tangram/Tangram.cpp:183:        glLoadIdentity();
./exercise_03/code/tangram/Tangram.cpp:184:        glScaled(zoom, zoom, 1.0);
./exercise_03/code/tangram/Tangram.cpp:185:        glTranslated(-centerX, -centerY, 0.0);
./exercise_03/code/tangram/Tangram.cpp:189:            glTranslated(snapProposalX, snapProposalY, 0);
./exercise_03/code/tangram/Tangram.cpp:192:        glTranslated(trans[i][0], trans[i][1], 0);
./exercise_03/code/tangram/Tangram.cpp:193:        glTranslated(center[i][0], center[i][1], 0);
./exercise_03/code/tangram/Tangram.cpp:194:        glRotated(trans[i][2] * 180 / M_PI, 0, 0, 1);
./exercise_03/code/tangram/Tangram.cpp:195:        glTranslated(-center[i][0], -center[i][1], 0);
./exercise_03/code/tangram/Tangram.cpp:196:        glColor4f(0.0f, 0.2f, 0.05f, 0.3f);
./exercise_03/code/tangram/Tangram.cpp:199:            glColor4f(0.6f, 0.5f, 0.3f, 0.8f);
./exercise_03/code/tangram/Tangram.cpp:203:        gluTessBeginPolygon(tobj, NULL);
./exercise_03/code/tangram/Tangram.cpp:204:        gluTessBeginContour(tobj);
./exercise_03/code/tangram/Tangram.cpp:207:            gluTessVertex(tobj, &poly[i][3 * j], &poly[i][3 * j]);
./exercise_03/code/tangram/Tangram.cpp:209:        gluTessEndContour(tobj);
./exercise_03/code/tangram/Tangram.cpp:210:        gluTessEndPolygon(tobj);
./exercise_03/code/tangram/Tangram.cpp:212:        glColor3f(0.0f, 0.0f, 0.0f);
./exercise_03/code/tangram/Tangram.cpp:213:        glBegin(GL_LINE_LOOP);
./exercise_03/code/tangram/Tangram.cpp:216:            glVertex2d(poly[i][3 * j + 0], poly[i][3 * j + 1]);
./exercise_03/code/tangram/Tangram.cpp:218:        glEnd();
./exercise_03/code/tangram/Tangram.cpp:223:    glViewport(0, 0, width, height);
./exercise_03/code/tangram/Tangram.cpp:224:    glMatrixMode(GL_PROJECTION);
./exercise_03/code/tangram/Tangram.cpp:225:    glLoadIdentity();
./exercise_03/code/tangram/Tangram.cpp:229:        gluOrtho2D(-ratio, ratio, -1.0, 1.0);
./exercise_03/code/tangram/Tangram.cpp:232:        gluOrtho2D(-1.0, 1.0, -ratio, ratio);
./exercise_03/code/tangram/Tangram.cpp:235:    glMatrixMode(GL_MODELVIEW);
./exercise_03/code/Demo_Texture01/Texture.cpp:76://      gluBuild2DMipmaps(GL_TEXTURE_2D,3,img.width(),img.height(),GL_BGRA_EXT,GL_UNSIGNED_BYTE,img.mirrored(false,true).convertToFormat(QImage::Format_RGB32).bits());
./exercise_03/code/Demo_Texture01/Texture.cpp:79:        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, img.width(), img.height(), 0, GL_BGRA_EXT, GL_UNSIGNED_BYTE, img.mirrored(false, true).bits());
./exercise_03/code/Demo_Texture01/Texture.cpp:81://      gluBuild2DMipmaps(GL_TEXTURE_2D,3,img.width(),img.height(),GL_BGRA_EXT,GL_UNSIGNED_BYTE,img.mirrored(false,true).bits());
./exercise_03/code/Demo_Texture01/Texture.cpp:182:    glLoadExtensions();
./exercise_03/code/Demo_Texture01/Texture.cpp:190:    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
./exercise_03/code/Demo_Texture01/Texture.cpp:191:    glPixelStorei(GL_PACK_ALIGNMENT, 1);
./exercise_03/code/Demo_Texture01/Texture.cpp:192:    glGenTextures(1, &texname);
./exercise_03/code/Demo_Texture01/Texture.cpp:193:    glBindTexture(GL_TEXTURE_2D, texname);
./exercise_03/code/Demo_Texture01/Texture.cpp:194:    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
./exercise_03/code/Demo_Texture01/Texture.cpp:195:    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
./exercise_03/code/Demo_Texture01/Texture.cpp:199:    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
./exercise_03/code/Demo_Texture01/Texture.cpp:201:    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
./exercise_03/code/Demo_Texture01/Texture.cpp:202:    // glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR_MIPMAP_LINEAR);
./exercise_03/code/Demo_Texture01/Texture.cpp:206:    glMatrixMode(GL_MODELVIEW);
./exercise_03/code/Demo_Texture01/Texture.cpp:207:    glLoadIdentity();
./exercise_03/code/Demo_Texture01/Texture.cpp:208:    glScaled(zoom, zoom, 1.0);
./exercise_03/code/Demo_Texture01/Texture.cpp:209:    glTranslated(-centerX, -centerY, 0.0);
./exercise_03/code/Demo_Texture01/Texture.cpp:211:    glClear(GL_COLOR_BUFFER_BIT);
./exercise_03/code/Demo_Texture01/Texture.cpp:218:        glEnable(GL_BLEND);
./exercise_03/code/Demo_Texture01/Texture.cpp:219:        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
./exercise_03/code/Demo_Texture01/Texture.cpp:220:        glColor4f(1, 1, 1, 0.35);
./exercise_03/code/Demo_Texture01/Texture.cpp:225:    glEnable(GL_TEXTURE_2D);
./exercise_03/code/Demo_Texture01/Texture.cpp:226:    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
./exercise_03/code/Demo_Texture01/Texture.cpp:227:    glBindTexture(GL_TEXTURE_2D, texname);
./exercise_03/code/Demo_Texture01/Texture.cpp:230:    glBegin(GL_TRIANGLES);
./exercise_03/code/Demo_Texture01/Texture.cpp:237:   glTexCoord2d(t[0], t[1]); \
./exercise_03/code/Demo_Texture01/Texture.cpp:238:   glVertex2d(g[0], g[1]);
./exercise_03/code/Demo_Texture01/Texture.cpp:252:    glEnd();
./exercise_03/code/Demo_Texture01/Texture.cpp:253:    glDisable(GL_TEXTURE_2D);
./exercise_03/code/Demo_Texture01/Texture.cpp:257:        glColor3f(0.0, 0.6, 0.5);
./exercise_03/code/Demo_Texture01/Texture.cpp:261:        glBegin(GL_LINES);
./exercise_03/code/Demo_Texture01/Texture.cpp:264:#define ADD_POINT(i, j) dragPoint(i, j, g); glVertex2d(g[0], g[1]);
./exercise_03/code/Demo_Texture01/Texture.cpp:286:        glEnd();
./exercise_03/code/Demo_Texture01/Texture.cpp:290:    glColor3f(0.2, 0.1, 0.3);
./exercise_03/code/Demo_Texture01/Texture.cpp:291:    glBegin(GL_LINE_LOOP);
./exercise_03/code/Demo_Texture01/Texture.cpp:297:        glVertex2d(
./exercise_03/code/Demo_Texture01/Texture.cpp:303:    glEnd();
./exercise_03/code/Demo_Texture01/Texture.cpp:307:    glViewport(0, 0, width, height);
./exercise_03/code/Demo_Texture01/Texture.cpp:308:    glMatrixMode(GL_PROJECTION);
./exercise_03/code/Demo_Texture01/Texture.cpp:309:    glLoadIdentity();
./exercise_03/code/Demo_Texture01/Texture.cpp:313:        gluOrtho2D(-ratio, ratio, -1.0, 1.0);
./exercise_03/code/Demo_Texture01/Texture.cpp:316:        gluOrtho2D(-1.0, 1.0, -ratio, ratio);
./exercise_03/code/Demo_Texture01/Texture.cpp:319:    glMatrixMode(GL_MODELVIEW);
./exercise_04/code/3D_Picking/Perspective.cpp:153:	for(unsigned int i=0;i<coord.size();++i) glVertex3dv(coord[i].ptr());
./exercise_04/code/3D_Picking/Perspective.cpp:157:        glColor3f(1.0, 0, 0);
./exercise_04/code/3D_Picking/Perspective.cpp:158:        glPointSize(8.0);
./exercise_04/code/3D_Picking/Perspective.cpp:159:        glBegin(GL_POINTS);
./exercise_04/code/3D_Picking/Perspective.cpp:160:          glVertex3dv(coord[selectedVertex].ptr());
./exercise_04/code/3D_Picking/Perspective.cpp:161:        glEnd();
./exercise_09/code/Bezier/Bezier.cpp:28:void glPrintErrors(const char* as_Function)
./exercise_09/code/Bezier/Bezier.cpp:35:      lr_Error = glGetError();
./exercise_09/code/Bezier/Bezier.cpp:129:    glMap1f(GL_MAP1_VERTEX_3, 0.0, 1.0, 3, l.size(), &tempoints[0][0]);
./exercise_09/code/Bezier/Bezier.cpp:130:    glEnable(GL_MAP1_VERTEX_3);
./exercise_09/code/Bezier/Bezier.cpp:132:    glBegin(GL_LINE_STRIP);
./exercise_09/code/Bezier/Bezier.cpp:134:        glEvalCoord1f((GLfloat) i/(42.0*zoom));
./exercise_09/code/Bezier/Bezier.cpp:135:    glEnd();
./exercise_09/code/Bezier/Bezier.cpp:136:    glFlush();
./exercise_09/code/Bezier/Bezier.cpp:170:    glBegin(GL_LINE_STRIP);
./exercise_09/code/Bezier/Bezier.cpp:178:        glVertex3dv(de_casteljau(i/(n-1),l).ptr());
./exercise_09/code/Bezier/Bezier.cpp:180:    glEnd();
./exercise_09/code/Bezier/Bezier.cpp:188:    glTranslated(-centerX,-centerY,0.0);
./exercise_09/code/Bezier/Bezier.cpp:207:        glColor3d (0,1,1);
./exercise_09/code/Bezier/Bezier.cpp:213:        glColor3d (0,1,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:102:        glVertex2d(t[j],polynomValue(t[j],i,n,binomialCoeff));
./exercise_09/code/Bernstein/BernsteinPol.cpp:103:        glVertex2d(t[j+1],polynomValue(t[j+1],i,n,binomialCoeff));
./exercise_09/code/Bernstein/BernsteinPol.cpp:112:    glLoadIdentity();
./exercise_09/code/Bernstein/BernsteinPol.cpp:113:    glScaled(zoom,zoom,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:114:    glTranslated(-0.5,-0.5,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:116:    glClear(GL_COLOR_BUFFER_BIT);
./exercise_09/code/Bernstein/BernsteinPol.cpp:117:    glBegin(GL_LINES);
./exercise_09/code/Bernstein/BernsteinPol.cpp:118:    glLineWidth(.5);
./exercise_09/code/Bernstein/BernsteinPol.cpp:119:    glColor3d(0,0,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:121:    glVertex2d(0,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:122:    glVertex2d(1,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:123:    glVertex2d(1,0.2);
./exercise_09/code/Bernstein/BernsteinPol.cpp:124:    glVertex2d(0.98,0.2);
./exercise_09/code/Bernstein/BernsteinPol.cpp:125:    glVertex2d(1,0.4);
./exercise_09/code/Bernstein/BernsteinPol.cpp:126:    glVertex2d(0.98,0.4);
./exercise_09/code/Bernstein/BernsteinPol.cpp:127:    glVertex2d(1,0.6);
./exercise_09/code/Bernstein/BernsteinPol.cpp:128:    glVertex2d(0.98,0.6);
./exercise_09/code/Bernstein/BernsteinPol.cpp:129:    glVertex2d(1,0.8);
./exercise_09/code/Bernstein/BernsteinPol.cpp:130:    glVertex2d(0.98,0.8);
./exercise_09/code/Bernstein/BernsteinPol.cpp:133:    glVertex2d(1,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:134:    glVertex2d(1,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:135:    glVertex2d(0.2,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:136:    glVertex2d(0.2,0.98);
./exercise_09/code/Bernstein/BernsteinPol.cpp:137:    glVertex2d(0.4,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:138:    glVertex2d(0.4,0.98);
./exercise_09/code/Bernstein/BernsteinPol.cpp:139:    glVertex2d(0.6,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:140:    glVertex2d(0.6,0.98);
./exercise_09/code/Bernstein/BernsteinPol.cpp:141:    glVertex2d(0.8,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:142:    glVertex2d(0.8,0.98);
./exercise_09/code/Bernstein/BernsteinPol.cpp:146:        glColor3f(colorCurv[i][0],colorCurv[i][1],colorCurv[i][2]);
./exercise_09/code/Bernstein/BernsteinPol.cpp:150:    glColor3d(0,0,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:152:    glVertex2d(0,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:153:    glVertex2d(0,1);
./exercise_09/code/Bernstein/BernsteinPol.cpp:154:    glVertex2d(0,0.2);
./exercise_09/code/Bernstein/BernsteinPol.cpp:155:    glVertex2d(0.02,0.2);
./exercise_09/code/Bernstein/BernsteinPol.cpp:156:    glVertex2d(0,0.4);
./exercise_09/code/Bernstein/BernsteinPol.cpp:157:    glVertex2d(0.02,0.4);
./exercise_09/code/Bernstein/BernsteinPol.cpp:158:    glVertex2d(0,0.6);
./exercise_09/code/Bernstein/BernsteinPol.cpp:159:    glVertex2d(0.02,0.6);
./exercise_09/code/Bernstein/BernsteinPol.cpp:160:    glVertex2d(0,0.8);
./exercise_09/code/Bernstein/BernsteinPol.cpp:161:    glVertex2d(0.02,0.8);
./exercise_09/code/Bernstein/BernsteinPol.cpp:164:    glVertex2d(0,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:165:    glVertex2d(1,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:166:    glVertex2d(0.2,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:167:    glVertex2d(0.2,0.02);
./exercise_09/code/Bernstein/BernsteinPol.cpp:168:    glVertex2d(0.4,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:169:    glVertex2d(0.4,0.02);
./exercise_09/code/Bernstein/BernsteinPol.cpp:170:    glVertex2d(0.6,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:171:    glVertex2d(0.6,0.02);
./exercise_09/code/Bernstein/BernsteinPol.cpp:172:    glVertex2d(0.8,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:173:    glVertex2d(0.8,0.02);
./exercise_09/code/Bernstein/BernsteinPol.cpp:174:    glEnd();
./exercise_09/code/Bernstein/BernsteinPol.cpp:185:        glPushMatrix();
./exercise_09/code/Bernstein/BernsteinPol.cpp:186:        glTranslatef(-0.07, start, 0.0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:187:        glScalef(3e-4, 3e-4, 3e-4);
./exercise_09/code/Bernstein/BernsteinPol.cpp:188:        glColor3f(0,0,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:191:            glutStrokeCharacter(GLUT_STROKE_ROMAN, ticks[i][j]);
./exercise_09/code/Bernstein/BernsteinPol.cpp:192:        glPopMatrix();
./exercise_09/code/Bernstein/BernsteinPol.cpp:194:        glPushMatrix();
./exercise_09/code/Bernstein/BernsteinPol.cpp:195:        glTranslatef(start-0.02,-0.04,  0.0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:196:        glScalef(3e-4, 3e-4, 3e-4);
./exercise_09/code/Bernstein/BernsteinPol.cpp:197:        glColor3f(0,0,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:199:            glutStrokeCharacter(GLUT_STROKE_ROMAN, ticks[i][j]);
./exercise_09/code/Bernstein/BernsteinPol.cpp:200:        glPopMatrix();
./exercise_09/code/Bernstein/BernsteinPol.cpp:206:        glPushMatrix();
./exercise_09/code/Bernstein/BernsteinPol.cpp:207:        glTranslatef(1.1, down, 0.0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:208:        glScalef(3e-4, 3e-4, 3e-4);
./exercise_09/code/Bernstein/BernsteinPol.cpp:209:        glColor3f(0,0,0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:210:        glutStrokeCharacter(GLUT_STROKE_ROMAN, 'B');
./exercise_09/code/Bernstein/BernsteinPol.cpp:211:        glutStrokeCharacter(GLUT_STROKE_ROMAN, '0'+m);
./exercise_09/code/Bernstein/BernsteinPol.cpp:212:        glutStrokeCharacter(GLUT_STROKE_ROMAN, '0'+n);
./exercise_09/code/Bernstein/BernsteinPol.cpp:213:        glutStrokeCharacter(GLUT_STROKE_ROMAN, '(');
./exercise_09/code/Bernstein/BernsteinPol.cpp:214:        glutStrokeCharacter(GLUT_STROKE_ROMAN, 'x');
./exercise_09/code/Bernstein/BernsteinPol.cpp:215:        glutStrokeCharacter(GLUT_STROKE_ROMAN, ')');
./exercise_09/code/Bernstein/BernsteinPol.cpp:216:        glPopMatrix();
./exercise_09/code/Bernstein/BernsteinPol.cpp:217:        glBegin(GL_LINES);
./exercise_09/code/Bernstein/BernsteinPol.cpp:218:        glColor3f(colorCurv[m][0],colorCurv[m][1],colorCurv[m][2]);
./exercise_09/code/Bernstein/BernsteinPol.cpp:219:        glVertex2d(1.25,down);
./exercise_09/code/Bernstein/BernsteinPol.cpp:220:        glVertex2d(1.35,down);
./exercise_09/code/Bernstein/BernsteinPol.cpp:221:        glEnd();
./exercise_09/code/Bernstein/BernsteinPol.cpp:225:   /* glEnable(GL_LIGHT0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:227:    glLightfv(GL_LIGHT0,GL_POSITION,pos0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:237:        glOrtho(-ratio,ratio,-1.0,1.0,-10.0,10.0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:241:        glOrtho(-1.0,1.0,-ratio,ratio,-10.0,10.0);
./exercise_09/code/Bernstein/BernsteinPol.cpp:340:    glutInit(&argc, argv);
